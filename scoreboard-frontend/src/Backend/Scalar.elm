-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Scalar exposing (Codecs, ISO8601DateTime(..), Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type ISO8601DateTime
    = ISO8601DateTime String


type Id
    = Id String


defineCodecs :
    { codecISO8601DateTime : Codec valueISO8601DateTime
    , codecId : Codec valueId
    }
    -> Codecs valueISO8601DateTime valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueISO8601DateTime valueId
    ->
        { codecISO8601DateTime : Codec valueISO8601DateTime
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueISO8601DateTime valueId -> Codec getterValue)
    -> Codecs valueISO8601DateTime valueId
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueISO8601DateTime valueId
    = Codecs (RawCodecs valueISO8601DateTime valueId)


type alias RawCodecs valueISO8601DateTime valueId =
    { codecISO8601DateTime : Codec valueISO8601DateTime
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs ISO8601DateTime Id
defaultCodecs =
    { codecISO8601DateTime =
        { encoder = \(ISO8601DateTime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ISO8601DateTime
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
