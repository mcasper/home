-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Object.Match exposing (..)

import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


createdAt : SelectionSet Backend.ScalarCodecs.ISO8601DateTime Backend.Object.Match
createdAt =
    Object.selectionForField "ScalarCodecs.ISO8601DateTime" "createdAt" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecISO8601DateTime |> .decoder)


game : SelectionSet String Backend.Object.Match
game =
    Object.selectionForField "String" "game" [] Decode.string


id : SelectionSet Backend.ScalarCodecs.Id Backend.Object.Match
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecId |> .decoder)


playerOne : SelectionSet String Backend.Object.Match
playerOne =
    Object.selectionForField "String" "playerOne" [] Decode.string


playerTwo : SelectionSet String Backend.Object.Match
playerTwo =
    Object.selectionForField "String" "playerTwo" [] Decode.string


scoreChanges :
    SelectionSet decodesTo Backend.Object.ScoreChange
    -> SelectionSet (List decodesTo) Backend.Object.Match
scoreChanges object_ =
    Object.selectionForCompositeField "scoreChanges" [] object_ (identity >> Decode.list)


updatedAt : SelectionSet Backend.ScalarCodecs.ISO8601DateTime Backend.Object.Match
updatedAt =
    Object.selectionForField "ScalarCodecs.ISO8601DateTime" "updatedAt" [] (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapCodecs |> .codecISO8601DateTime |> .decoder)
