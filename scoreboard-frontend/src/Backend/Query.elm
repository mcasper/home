-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Query exposing (..)

import Backend.InputObject
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias MatchRequiredArguments =
    { id : Backend.ScalarCodecs.Id }


{-| An example field added by the generator
-}
match :
    MatchRequiredArguments
    -> SelectionSet decodesTo Backend.Object.Match
    -> SelectionSet decodesTo RootQuery
match requiredArgs object_ =
    Object.selectionForCompositeField "match" [ Argument.required "id" requiredArgs.id (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecId) ] object_ identity


{-| An example field added by the generator
-}
matches :
    SelectionSet decodesTo Backend.Object.Match
    -> SelectionSet (List decodesTo) RootQuery
matches object_ =
    Object.selectionForCompositeField "matches" [] object_ (identity >> Decode.list)
